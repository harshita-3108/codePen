{"version":3,"sources":["Editor.js","useLocalStorage.js","App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAkDeA,EAvCA,SAACC,GACd,IACEC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAEF,EAAqBC,oBAAS,GAA9B,mBAAOC,EAAP,KAAYC,EAAZ,KAMA,OACE,sBAAKC,UAAS,2BAAsBF,EAAK,GAAG,aAA5C,UACE,sBAAKE,UAAU,aAAf,UACGN,EACD,wBACAO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAIH,GAAQ,SAAAI,GAAQ,OAAGA,MAHhC,SAIA,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGhD,cAAC,aAAD,CACIC,eAjBR,SAAsBC,EAAOC,EAAKd,GAEhCC,EAASD,IAgBHA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAa,EACbC,MAAK,EACLC,KAAKpB,EACLqB,aAAY,EACZC,MAAM,iBCxCH,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,iBAGgBF,EAE7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAPX,mBAAOvB,EAAP,KAAc8B,EAAd,KAeA,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GC2BFI,MA7Cf,WACE,MAAwBb,EAAgB,OAAO,IAA/C,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAgB,MAAM,IAA5C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoBjB,EAAgB,KAAK,IAAzC,mBAAOkB,EAAP,KAAWC,EAAX,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAmBA,OAlBAX,qBAAU,WACR,IAAMY,EAAQC,YAAW,WAEvBF,EAAU,sCAAD,OAGHL,EAHG,yDAMHF,EANG,sDASLI,EATK,gCAYT,KACF,OAAO,kBAAIM,aAAaF,MACvB,CAACR,EAAKE,EAAIE,IAEX,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAAC,EAAD,CAAQP,SAAS,MAAOC,YAAY,OAAOC,MAAOmC,EAAMlC,SAAUmC,IAClE,cAAC,EAAD,CAAQtC,SAAS,MAAMC,YAAY,MAAMC,MAAOqC,EAAKpC,SAAUqC,IAC/D,cAAC,EAAD,CAAQxC,SAAS,aAAaC,YAAY,aAAaC,MAAOuC,EAAItC,SAAUuC,OAE9E,qBAAKnC,UAAU,mBAAf,SACA,wBACAoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCnCbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3d673d96.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport {Controlled as ControlledEditor} from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"codemirror/mode/xml/xml.js\";\r\nimport \"codemirror/lib/codemirror.js\";\r\nimport \"codemirror/mode/css/css.js\";\r\nimport \"codemirror/mode/javascript/javascript.js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt,faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Editor = (props) => {\r\n  const{\r\n    language,\r\n    displayName,\r\n    value,\r\n    onChange\r\n  }=props\r\n  const [open,setOpen]=useState(true);\r\n  function handleChange(editor,data,value)\r\n  {\r\n    onChange(value);\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open?'':'collapsed'}`}>\r\n      <div className=\"editor-top\">\r\n        {displayName}\r\n        <button \r\n        type=\"button\"\r\n        className=\"expand-collapse-btn\"\r\n        onClick={()=>setOpen(prevOpen=>!prevOpen)}>\r\n        <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n          onBeforeChange={handleChange}\r\n          value={value}\r\n          className=\"code-mirror-wrapper\"\r\n          options={{\r\n            lineWrapping:true,\r\n            lint:true,\r\n            mode:language,\r\n            lineNumbers:true,\r\n            theme:\"dracula\"\r\n            }}\r\n        />\r\n    </div>\r\n  );\r\n};\r\nexport default Editor;\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React,{useState,useEffect} from \"react\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\nimport  useLocalStorage from \"./useLocalStorage\";\nfunction App() { \n  const [html, setHtml] = useLocalStorage(\"html\",'');\n  const [css, setCss] = useLocalStorage(\"css\",'');\n  const [js, setJs] = useLocalStorage(\"js\",'');\n  const [srcDoc, setSrcDoc] = useState('');\n  useEffect(() => {\n    const timeout=setTimeout(()=>\n    {\n      setSrcDoc(\n        `<html>\n        <style>\n          ${css}\n        </style>\n        <body>\n          ${html}\n        </body>\n      <script>\n        ${js}\n      </script></html>`\n      )\n    },250)\n    return ()=>clearTimeout(timeout);\n  }, [html,css,js])\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor language=\"xml\"  displayName=\"HTML\" value={html} onChange={setHtml} />\n        <Editor language=\"css\" displayName=\"CSS\" value={css} onChange={setCss} />\n        <Editor language=\"javascript\" displayName=\"JavaScript\" value={js} onChange={setJs} />\n      </div>\n      <div className=\"bottom-pane pane\">\n      <iframe\n      srcDoc={srcDoc}\n      title=\"output\"\n      sandbox=\"allow-scripts\"\n      frameBorder=\"0\"\n      width=\"100%\"\n      height=\"100%\"\n      ></iframe>\n      </div>\n      \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}